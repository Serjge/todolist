{"version":3,"sources":["serviceWorker.ts","enum/taskPriorities.ts","enum/TaskStatuses.ts","enum/arrayElement.ts","enum/amountOfElements.ts","enum/resultCode.ts","const/constIndex.ts","store/actions/todolistsActions.ts","store/selectors/selectTasks.ts","store/selectors/selectTodolist.ts","store/selectors/selectApp.ts","store/selectors/selectAuth.ts","api/config/instance.ts","api/tasksApi.ts","api/todoListApi.ts","api/authApi.ts","store/actions/tasksActions.ts","store/actions/authActions.ts","store/actions/appActions.ts","utils/errorUtils.ts","store/thunks/tasksThunks.ts","components/containerTodolists/todoList/Todolist.tsx","store/thunks/todolistThunks.ts","components/containerTodolists/todoList/task/Task.tsx","components/containerTodolists/todoList/buttonFilter/ButtonFilter.tsx","components/buttonAppBar/ButtonAppBar.tsx","store/thunks/authThunks.ts","components/common/AddItemForm.tsx","components/common/EditableSpan.tsx","components/containerTodolists/ContainerTodoLists.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","components/loadingBar/LoadingBar.tsx","components/login/Login.tsx","App.tsx","store/thunks/appThunks.ts","store/reducers/tasksReducer.ts","store/reducers/todoListsReducer.ts","store/reducers/appReducer.ts","store/reducers/authReducer.ts","store/store.ts","index.tsx","components/containerTodolists/todoList/TodoList.module.css"],"names":["Boolean","window","location","hostname","match","TaskPriorities","TaskStatuses","arrayElement","amountOfElements","ResultCode","TODOLIST_ACTIONS","selectTask","state","todolistId","taskId","tasks","filter","id","selectTodoListArrayId","todoList","map","selectTodoListFilter","selectStatus","app","status","selectError","error","selectIsInitialized","isInitialized","selectIsLoginIn","auth","isLoginIn","instance","axios","create","baseURL","process","withCredentials","headers","taskAPI","get","title","post","delete","model","put","todoListId","todolistAPI","authAPI","data","TASK_ACTIONS","renameTodoList","type","RENAME","payload","changeTodolistEntityStatus","entityStatus","CHANGE_ENTITY_STATUS","AUTH_ACTIONS","removeTask","REMOVE","changeTask","task","CHANGE","APP_ACTIONS","setIsLoggedIn","SET_IS_LOGGED_IN","setAppStatus","SET_STATUS","setAppError","SET_ERROR","handleServerNetworkError","dispatch","message","handleServerAppError","messages","length","null","updateTaskTC","change","getState","a","res","resultCode","success","item","Todolist","memo","useDispatch","useSelector","selectTasks","shallowEqual","selectTodoListTitle","selectTodoListEntityStatus","New","Completed","addTask","useCallback","titleTask","ADD","addTaskTC","deleteTodoList","titleTodolist","renameTodoListTC","useEffect","items","SET","getTasksTC","className","style","disable","EditableSpan","rename","label","IconButton","onClick","Delete","AddItemForm","loadingBar","CircularProgress","notFont","Task","wrapperButtons","ButtonFilter","filterName","selectTaskStatus","selectTaskTitle","deleteTask","removeTaskTC","isDoneTask","e","newIsDoneValue","currentTarget","checked","renameTask","height","Grid","container","alignItems","justifyContent","spacing","Checkbox","inputProps","size","onChange","handleOnClick","CHANGE_FILTER","changeFilterTodolist","Button","margin","variant","ButtonAppBar","navigate","useNavigate","isLogin","Box","sx","flexGrow","AppBar","position","Toolbar","edge","color","Typography","component","refTitle","useRef","useState","setError","addTaskHandler","current","value","trim","TextField","inputRef","onKeyPress","key","marginLeft","maxWidth","maxHeight","minWidth","minHeight","disabled","edit","setEdit","newTitle","setNewTitle","activeViewMode","whiteSpace","onDoubleClick","onBlur","autoFocus","width","ContainerTodoLists","todoListsId","todolistData","addTodoListHandler","addTodoListTC","TodoListsMap","Paper","padding","Container","fixed","to","Alert","forwardRef","props","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","LoadingBar","LinearProgress","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","getFieldProps","touched","FormControlLabel","control","App","initialized","SET_INITIALIZED","path","element","top","textAlign","initialState","rootReducer","combineReducers","action","copyState","forEach","todolist","priority","Low","tl","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.0702e559.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4,\n}\n","export enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n","export enum arrayElement {\n  null = 0,\n  first = 1,\n  second = 2,\n  third = 3,\n  fourth = 4,\n  fifth = 5,\n}\n","export enum amountOfElements {\n  zero = 0,\n  one = 1,\n  two = 2,\n  three = 3,\n  four = 4,\n  five = 5,\n  six = 6,\n  seven = 7,\n  eight = 8,\n  nine = 9,\n  ten = 10,\n}\n","export enum ResultCode {\n  success = 0,\n  error = 1,\n}\n","export const FIRST_INDEX = 0;\n","import {\n  FilterValuesType,\n  RequestStatusType,\n  TodoListsServerType,\n  TodoListsType,\n} from 'types';\n\nexport enum TODOLIST_ACTIONS {\n  REMOVE = 'TODOLIST_REMOVE',\n  ADD = 'TODOLIST_ADD',\n  CHANGE_FILTER = 'TODOLIST_CHANGE_FILTER',\n  RENAME = 'TODOLIST_RENAME',\n  SET = 'TODOLIST_SET',\n  CHANGE_ENTITY_STATUS = 'TODOLIST_CHANGE_ENTITY_STATUS',\n}\n\nexport const changeFilterTodolist = (todolistId: string, filter: FilterValuesType) =>\n  ({\n    type: TODOLIST_ACTIONS.CHANGE_FILTER,\n    payload: {\n      todolistId,\n      filter,\n    },\n  } as const);\n\nexport const removeTodolist = (todolistId: string) =>\n  ({\n    type: TODOLIST_ACTIONS.REMOVE,\n    payload: {\n      todolistId,\n    },\n  } as const);\n\nexport const addTodoList = (todoList: TodoListsType) =>\n  ({\n    type: TODOLIST_ACTIONS.ADD,\n    payload: {\n      todoList,\n    },\n  } as const);\n\nexport const renameTodoList = (todolistId: string, title: string) =>\n  ({\n    type: TODOLIST_ACTIONS.RENAME,\n    payload: {\n      todolistId,\n      title,\n    },\n  } as const);\n\nexport const setTodoList = (todolistData: TodoListsServerType[]) =>\n  ({\n    type: TODOLIST_ACTIONS.SET,\n    payload: {\n      todolistData,\n    },\n  } as const);\n\nexport const changeTodolistEntityStatus = (\n  todolistId: string,\n  entityStatus: RequestStatusType,\n) =>\n  ({\n    type: TODOLIST_ACTIONS.CHANGE_ENTITY_STATUS,\n    payload: {\n      todolistId,\n      entityStatus,\n    },\n  } as const);\n","import { FIRST_INDEX } from 'const';\nimport { TaskStatuses } from 'enum';\nimport { rootReducerType } from 'store';\nimport { TaskType } from 'types';\n\nexport const selectTasks = (state: rootReducerType, todolistId: string): TaskType[] =>\n  state.tasks[todolistId];\n\nexport const selectTask = (\n  state: rootReducerType,\n  todolistId: string,\n  taskId: string,\n): TaskType => state.tasks[todolistId].filter(({ id }) => id === taskId)[FIRST_INDEX];\n\nexport const selectTaskTitle = (\n  state: rootReducerType,\n  todolistId: string,\n  taskId: string,\n): string => state.tasks[todolistId].filter(({ id }) => id === taskId)[FIRST_INDEX].title;\n\nexport const selectTaskStatus = (\n  state: rootReducerType,\n  todolistId: string,\n  taskId: string,\n): TaskStatuses =>\n  state.tasks[todolistId].filter(({ id }) => id === taskId)[FIRST_INDEX].status;\n","import { FIRST_INDEX } from 'const';\nimport { rootReducerType } from 'store';\nimport { FilterValuesType, RequestStatusType, TodoListsType } from 'types';\n\nexport const selectTodoListArray = (state: rootReducerType): TodoListsType[] =>\n  state.todoList;\n\nexport const selectTodoListArrayId = (state: rootReducerType): string[] =>\n  state.todoList.map(({ id }) => id);\n\nexport const selectTodoList = (\n  state: rootReducerType,\n  todolistId: string,\n): TodoListsType => state.todoList.filter(({ id }) => id === todolistId)[FIRST_INDEX];\n\nexport const selectTodoListTitle = (state: rootReducerType, todolistId: string): string =>\n  state.todoList.filter(({ id }) => id === todolistId)[FIRST_INDEX].title;\n\nexport const selectTodoListFilter = (\n  state: rootReducerType,\n  todolistId: string,\n): FilterValuesType =>\n  state.todoList.filter(({ id }) => id === todolistId)[FIRST_INDEX].filter;\n\nexport const selectTodoListEntityStatus = (\n  state: rootReducerType,\n  todolistId: string,\n): RequestStatusType =>\n  state.todoList.filter(({ id }) => id === todolistId)[FIRST_INDEX].entityStatus;\n","import { rootReducerType } from 'store/store';\n\nexport const selectStatus = (state: rootReducerType): string => state.app.status;\n\nexport const selectError = (state: rootReducerType): string | null => state.app.error;\n\nexport const selectIsInitialized = (state: rootReducerType): boolean =>\n  state.app.isInitialized;\n","import { rootReducerType } from 'store/store';\n\nexport const selectIsLoginIn = (state: rootReducerType): boolean => state.auth.isLoginIn;\n","import axios from 'axios';\n\nexport const instance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'API-KEY': process.env.REACT_APP_API_KEY as string,\n  },\n});\n","import { AxiosResponse } from 'axios';\n\nimport { instance, GetTasksResponse, ResponseType } from 'api';\nimport { TaskType } from 'types';\n\nexport const taskAPI = {\n  getTasks(todolistId: string) {\n    return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`);\n  },\n\n  creatTask(todolistId: string, title: string) {\n    return instance.post<\n      ResponseType<{ item: TaskType }>,\n      AxiosResponse<ResponseType<{ item: TaskType }>>,\n      { title: string }\n    >(`/todo-lists/${todolistId}/tasks`, { title });\n  },\n\n  deleteTask(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n\n  updateTask(model: Partial<TaskType>) {\n    return instance.put<\n      ResponseType<{ item: TaskType }>,\n      AxiosResponse<ResponseType<{ item: TaskType }>>,\n      Partial<TaskType>\n    >(`/todo-lists/${model.todoListId}/tasks/${model.id}`, model);\n  },\n};\n","import { AxiosResponse } from 'axios';\n\nimport { ResponseType, instance } from 'api';\nimport { TodoListsType } from 'types';\n\nexport const todolistAPI = {\n  getTodoList() {\n    return instance.get<TodoListsType[]>('todo-lists');\n  },\n\n  createTodoList(title: string) {\n    return instance.post<\n      ResponseType<{ item: TodoListsType }>,\n      AxiosResponse<ResponseType<{ item: TodoListsType }>>,\n      { title: string }\n    >('todo-lists', { title });\n  },\n\n  deleteTodoList(todolistId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\n  },\n\n  updateTodoList(todolistId: string, title: string) {\n    return instance.put<ResponseType>(`todo-lists/${todolistId}`, { title });\n  },\n};\n","import { AxiosResponse } from 'axios';\n\nimport { ResponseType } from './type';\n\nimport { instance } from 'api/config';\nimport { LoginParamsType, authType } from 'types';\n\nexport const authAPI = {\n  login(data: LoginParamsType) {\n    return instance.post<\n      LoginParamsType,\n      AxiosResponse<ResponseType<{ userId: number }>>\n    >('/auth/login', data);\n  },\n  me() {\n    return instance.get<ResponseType<authType>>('/auth/me');\n  },\n  logout() {\n    return instance.delete<ResponseType>('/auth/login');\n  },\n};\n","import { TaskType } from 'types';\n\nexport enum TASK_ACTIONS {\n  REMOVE = 'TASK_REMOVE',\n  CHANGE = 'TASK_CHANGE',\n  ADD = 'TASK_ADD',\n  SET = 'TASK_SET',\n}\n\nexport const addTask = (task: TaskType) =>\n  ({\n    type: TASK_ACTIONS.ADD,\n    payload: {\n      task,\n    },\n  } as const);\n\nexport const removeTask = (todolistId: string, taskId: string) =>\n  ({\n    type: TASK_ACTIONS.REMOVE,\n    payload: {\n      todolistId,\n      taskId,\n    },\n  } as const);\n\nexport const setTasks = (todoListId: string, tasks: TaskType[]) =>\n  ({\n    type: TASK_ACTIONS.SET,\n    payload: {\n      todoListId,\n      tasks,\n    },\n  } as const);\n\nexport const changeTask = (task: TaskType) =>\n  ({\n    type: TASK_ACTIONS.CHANGE,\n    payload: {\n      task,\n    },\n  } as const);\n","export enum AUTH_ACTIONS {\n  SET_IS_LOGGED_IN = 'SET-IS-LOGGED-IN',\n}\n\nexport const setIsLoggedIn = (isLoginIn: boolean) =>\n  ({\n    type: AUTH_ACTIONS.SET_IS_LOGGED_IN,\n    payload: {\n      isLoginIn,\n    },\n  } as const);\n","import { RequestStatusType } from 'types';\n\nexport enum APP_ACTIONS {\n  SET_STATUS = 'APP_SET-STATUS',\n  SET_ERROR = 'APP_SET-ERROR',\n  SET_INITIALIZED = 'APP_INITIALIZED',\n}\nexport const setAppStatus = (status: RequestStatusType) =>\n  ({\n    type: APP_ACTIONS.SET_STATUS,\n    payload: {\n      status,\n    },\n  } as const);\n\nexport const setAppError = (error: string | null) =>\n  ({\n    type: APP_ACTIONS.SET_ERROR,\n    payload: {\n      error,\n    },\n  } as const);\n\nexport const setIsInitialized = (initialized: boolean) =>\n  ({\n    type: APP_ACTIONS.SET_INITIALIZED,\n    payload: {\n      initialized,\n    },\n  } as const);\n","import { Dispatch } from 'redux';\n\nimport { ResponseType } from 'api';\nimport { arrayElement } from 'enum';\nimport {\n  AppActionsType,\n  setAppError,\n  setAppStatus,\n  ErrorUtilsDispatchType,\n} from 'store/actions';\n\nexport const handleServerNetworkError = (\n  dispatch: Dispatch<AppActionsType>,\n  message: string,\n): void => {\n  dispatch(setAppError(message));\n};\n\nexport const handleServerAppError = <T>(\n  data: ResponseType<T>,\n  dispatch: ErrorUtilsDispatchType,\n): void => {\n  if (data.messages.length) {\n    dispatch(setAppError(data.messages[arrayElement.null]));\n  } else {\n    dispatch(setAppError('Some error occurred'));\n  }\n  dispatch(setAppStatus('failed'));\n};\n","import { AxiosError } from 'axios';\n\nimport { taskAPI } from 'api';\nimport { ResultCode } from 'enum';\nimport { rootReducerType } from 'store';\nimport {\n  addTask,\n  changeTask,\n  removeTask,\n  setAppStatus,\n  setTasks,\n  changeTodolistEntityStatus,\n} from 'store/actions';\nimport { selectTask } from 'store/selectors';\nimport { AppThunkType } from 'store/thunks';\nimport { TaskType } from 'types';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const getTasksTC =\n  (todolistId: string): AppThunkType =>\n  async dispatch => {\n    try {\n      dispatch(setAppStatus('loading'));\n      dispatch(changeTodolistEntityStatus(todolistId, 'idle'));\n      const res = await taskAPI.getTasks(todolistId);\n      dispatch(setTasks(todolistId, res.data.items));\n    } catch (error) {\n      const { message } = error as AxiosError;\n\n      handleServerNetworkError(dispatch, message);\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n      dispatch(changeTodolistEntityStatus(todolistId, 'succeeded'));\n    }\n  };\n\nexport const addTaskTC =\n  (todolistId: string, title: string): AppThunkType =>\n  async dispatch => {\n    try {\n      dispatch(setAppStatus('loading'));\n      dispatch(changeTodolistEntityStatus(todolistId, 'loading'));\n      const res = await taskAPI.creatTask(todolistId, title);\n      if (res.data.resultCode === ResultCode.success) {\n        dispatch(addTask(res.data.data.item));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    } catch (error) {\n      const { message } = error as AxiosError;\n\n      handleServerNetworkError(dispatch, message);\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n      dispatch(changeTodolistEntityStatus(todolistId, 'succeeded'));\n    }\n  };\n\nexport const removeTaskTC =\n  (todolistId: string, taskId: string): AppThunkType =>\n  async dispatch => {\n    try {\n      dispatch(setAppStatus('loading'));\n      dispatch(changeTodolistEntityStatus(todolistId, 'loading'));\n      await taskAPI.deleteTask(todolistId, taskId);\n      dispatch(removeTask(todolistId, taskId));\n    } catch (error) {\n      const { message } = error as AxiosError;\n\n      handleServerNetworkError(dispatch, message);\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n      dispatch(changeTodolistEntityStatus(todolistId, 'succeeded'));\n    }\n  };\n\nexport const updateTaskTC =\n  (todolistId: string, taskId: string, change: Partial<TaskType>): AppThunkType =>\n  async (dispatch, getState: () => rootReducerType) => {\n    try {\n      dispatch(changeTodolistEntityStatus(todolistId, 'loading'));\n      dispatch(setAppStatus('loading'));\n      const task = selectTask(getState(), todolistId, taskId) as TaskType;\n      const res = await taskAPI.updateTask({ ...task, ...change });\n      if (res.data.resultCode === ResultCode.success) {\n        dispatch(changeTask(res.data.data.item));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    } catch (error) {\n      const { message } = error as AxiosError;\n\n      handleServerNetworkError(dispatch, message);\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n      dispatch(changeTodolistEntityStatus(todolistId, 'succeeded'));\n    }\n  };\n","import { memo, ReactElement, useCallback, useEffect } from 'react';\n\nimport { Delete } from '@mui/icons-material';\nimport { CircularProgress, IconButton } from '@mui/material';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\n\nimport style from './TodoList.module.css';\n\nimport { AddItemForm, ButtonFilter, EditableSpan, Task } from 'components';\nimport { TaskStatuses } from 'enum';\nimport { rootReducerType } from 'store';\nimport {\n  selectTasks,\n  selectTodoListTitle,\n  selectTodoListEntityStatus,\n  selectTodoListFilter,\n} from 'store/selectors';\nimport { addTaskTC, getTasksTC, removeTodoListTC, renameTodoListTC } from 'store/thunks';\n\ntype TodoListPropsType = {\n  todolistId: string;\n};\n\nexport const Todolist = memo(({ todolistId }: TodoListPropsType) => {\n  const dispatch = useDispatch();\n\n  let tasks = useSelector(\n    (state: rootReducerType) => selectTasks(state, todolistId),\n    shallowEqual,\n  );\n\n  const title = useSelector(\n    (state: rootReducerType) => selectTodoListTitle(state, todolistId),\n    shallowEqual,\n  );\n\n  const filter = useSelector(\n    (state: rootReducerType) => selectTodoListFilter(state, todolistId),\n    shallowEqual,\n  );\n  const entityStatus = useSelector(\n    (state: rootReducerType) => selectTodoListEntityStatus(state, todolistId),\n    shallowEqual,\n  );\n\n  const zeroArrayTasks = 0;\n\n  const TasksRender = (): ReactElement | ReactElement[] => {\n    if (entityStatus === 'idle') {\n      return (\n        <div className={style.loadingBar}>\n          <CircularProgress />\n        </div>\n      );\n    }\n    if (tasks.length === zeroArrayTasks) {\n      return <span className={style.notFont}>Not fount task</span>;\n    }\n\n    return tasks.map(({ id }) => <Task taskId={id} todolistId={todolistId} key={id} />);\n  };\n\n  if (filter === 'active') {\n    tasks = tasks.filter(({ status }) => status === TaskStatuses.New);\n  }\n  if (filter === 'completed') {\n    tasks = tasks.filter(({ status }) => status === TaskStatuses.Completed);\n  }\n\n  const addTask = useCallback(\n    (titleTask: string) => dispatch(addTaskTC(todolistId, titleTask)),\n    [todolistId, dispatch],\n  );\n\n  const deleteTodoList = useCallback(() => {\n    dispatch(removeTodoListTC(todolistId));\n  }, [todolistId, dispatch]);\n\n  const renameTodoList = useCallback(\n    (titleTodolist: string) => {\n      dispatch(renameTodoListTC(todolistId, titleTodolist));\n    },\n    [todolistId, dispatch],\n  );\n\n  useEffect(() => {\n    dispatch(getTasksTC(todolistId));\n  }, []);\n\n  return (\n    <div className={entityStatus === 'loading' ? style.disable : ''}>\n      <h3 className={style.title}>\n        <EditableSpan title={title} rename={renameTodoList} label=\"Name Todolist\" />\n        <IconButton onClick={deleteTodoList} aria-label=\"delete\">\n          <Delete />\n        </IconButton>\n      </h3>\n      <AddItemForm label=\"Name task\" addTask={addTask} />\n      <div>{TasksRender()}</div>\n      <div className={style.wrapperButtons}>\n        <ButtonFilter todolistId={todolistId} title=\"All\" filterName=\"all\" />\n        <ButtonFilter todolistId={todolistId} title=\"Active\" filterName=\"active\" />\n        <ButtonFilter todolistId={todolistId} title=\"Completed\" filterName=\"completed\" />\n      </div>\n    </div>\n  );\n});\n","import { AxiosError } from 'axios';\n\nimport { todolistAPI } from 'api';\nimport {\n  addTodoList,\n  removeTodolist,\n  renameTodoList,\n  setAppStatus,\n  setTodoList,\n  changeTodolistEntityStatus,\n} from 'store/actions';\nimport { AppThunkType } from 'store/thunks';\nimport { handleServerNetworkError } from 'utils';\n\nexport const getTodoListsTC = (): AppThunkType => async dispatch => {\n  try {\n    dispatch(setAppStatus('loading'));\n    const res = await todolistAPI.getTodoList();\n    dispatch(setTodoList(res.data));\n  } catch (error) {\n    const { message } = error as AxiosError;\n\n    handleServerNetworkError(dispatch, message);\n  } finally {\n    dispatch(setAppStatus('succeeded'));\n  }\n};\n\nexport const addTodoListTC =\n  (title: string): AppThunkType =>\n  async dispatch => {\n    try {\n      dispatch(setAppStatus('loading'));\n      const res = await todolistAPI.createTodoList(title);\n      dispatch(addTodoList(res.data.data.item));\n    } catch (error) {\n      const { message } = error as AxiosError;\n\n      handleServerNetworkError(dispatch, message);\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n    }\n  };\n\nexport const removeTodoListTC =\n  (todoListId: string): AppThunkType =>\n  async dispatch => {\n    try {\n      dispatch(setAppStatus('loading'));\n      dispatch(changeTodolistEntityStatus(todoListId, 'loading'));\n      await todolistAPI.deleteTodoList(todoListId);\n      dispatch(removeTodolist(todoListId));\n    } catch (error) {\n      const { message } = error as AxiosError;\n\n      handleServerNetworkError(dispatch, message);\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n    }\n  };\n\nexport const renameTodoListTC =\n  (todoListId: string, title: string): AppThunkType =>\n  async dispatch => {\n    try {\n      dispatch(setAppStatus('loading'));\n      dispatch(changeTodolistEntityStatus(todoListId, 'loading'));\n      await todolistAPI.updateTodoList(todoListId, title);\n      dispatch(renameTodoList(todoListId, title));\n    } catch (error) {\n      const { message } = error as AxiosError;\n\n      handleServerNetworkError(dispatch, message);\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n      dispatch(changeTodolistEntityStatus(todoListId, 'succeeded'));\n    }\n  };\n","import { ChangeEvent, memo, useCallback } from 'react';\n\nimport { Delete } from '@mui/icons-material';\nimport { Checkbox, Grid, IconButton } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { EditableSpan } from 'components';\nimport { TaskStatuses } from 'enum';\nimport { rootReducerType } from 'store';\nimport { selectTaskTitle, selectTaskStatus } from 'store/selectors';\nimport { removeTaskTC, updateTaskTC } from 'store/thunks';\n\ntype TaskPropsType = {\n  taskId: string;\n  todolistId: string;\n};\n\nexport const Task = memo(({ taskId, todolistId }: TaskPropsType) => {\n  const dispatch = useDispatch();\n\n  const status = useSelector((state: rootReducerType) =>\n    selectTaskStatus(state, todolistId, taskId),\n  );\n  const title = useSelector((state: rootReducerType) =>\n    selectTaskTitle(state, todolistId, taskId),\n  );\n\n  const deleteTask = useCallback(\n    () => dispatch(removeTaskTC(todolistId, taskId)),\n    [todolistId, taskId, dispatch],\n  );\n\n  const isDoneTask = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      const newIsDoneValue = e.currentTarget.checked;\n\n      dispatch(\n        updateTaskTC(todolistId, taskId, {\n          status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\n        }),\n      );\n    },\n    [dispatch, todolistId, taskId],\n  );\n\n  const renameTask = useCallback(\n    (titleTask: string) =>\n      dispatch(updateTaskTC(todolistId, taskId, { title: titleTask })),\n    [todolistId, taskId, dispatch],\n  );\n\n  return (\n    <div style={{ height: '60px' }} key={taskId} className={status ? 'is-done' : ''}>\n      <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n        <Grid item>\n          <Checkbox\n            inputProps={{ 'aria-label': 'controlled' }}\n            size=\"small\"\n            onChange={isDoneTask}\n            checked={status === TaskStatuses.Completed}\n          />\n        </Grid>\n        <Grid item>\n          <EditableSpan rename={renameTask} title={title} label=\"Name Task\" />\n        </Grid>\n        <Grid item>\n          <IconButton onClick={deleteTask} aria-label=\"delete\">\n            <Delete />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n","import { memo, ReactElement, useCallback } from 'react';\n\nimport { Button } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { rootReducerType } from 'store';\nimport { changeFilterTodolist } from 'store/actions';\nimport { selectTodoListFilter } from 'store/selectors';\nimport { FilterValuesType } from 'types';\n\ntype ButtonFilterPropsType = {\n  todolistId: string;\n  title: string;\n  filterName: FilterValuesType;\n};\n\nexport const ButtonFilter = memo(\n  ({ todolistId, title, filterName }: ButtonFilterPropsType): ReactElement => {\n    const dispatch = useDispatch();\n\n    const filter = useSelector((state: rootReducerType) =>\n      selectTodoListFilter(state, todolistId),\n    );\n\n    const handleOnClick = useCallback(\n      () => dispatch(changeFilterTodolist(todolistId, filterName)),\n      [todolistId, dispatch],\n    );\n\n    return (\n      <Button\n        style={{ margin: '5px' }}\n        onClick={handleOnClick}\n        variant={filter === filterName ? 'contained' : 'outlined'}\n        size=\"small\"\n      >\n        {title}\n      </Button>\n    );\n  },\n);\n","import { memo, ReactElement } from 'react';\n\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { AppBar, Box, Button, IconButton, Toolbar, Typography } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { selectIsLoginIn } from 'store/selectors';\nimport { logoutTC } from 'store/thunks';\n\nexport const ButtonAppBar = memo((): ReactElement => {\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n  const isLogin = useSelector(selectIsLoginIn);\n\n  const handleLogout = (): void => {\n    dispatch(logoutTC());\n  };\n  const handleLogin = (): void => {\n    navigate('/login');\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1 }}>\n            Todolist\n          </Typography>\n          {isLogin ? (\n            <Button onClick={handleLogout} color=\"inherit\">\n              Logout\n            </Button>\n          ) : (\n            <Button onClick={handleLogin} color=\"inherit\">\n              Login\n            </Button>\n          )}\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n});\n","import { AxiosError } from 'axios';\n\nimport { authAPI } from 'api';\nimport { ResultCode } from 'enum';\nimport { setAppStatus, setIsLoggedIn } from 'store/actions';\nimport { AppThunkType } from 'store/thunks/type';\nimport { LoginParamsType } from 'types';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const loginTC =\n  (value: LoginParamsType): AppThunkType =>\n  async dispatch => {\n    try {\n      dispatch(setAppStatus('loading'));\n      const res = await authAPI.login(value);\n      if (res.data.resultCode === ResultCode.success) {\n        dispatch(setIsLoggedIn(true));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    } catch (error) {\n      const { message } = error as AxiosError;\n\n      handleServerNetworkError(dispatch, message);\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n    }\n  };\n\nexport const logoutTC = (): AppThunkType => async dispatch => {\n  try {\n    dispatch(setAppStatus('loading'));\n    const res = await authAPI.logout();\n    if (res.data.resultCode === ResultCode.success) {\n      dispatch(setIsLoggedIn(false));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  } catch (error) {\n    const { message } = error as AxiosError;\n\n    handleServerNetworkError(dispatch, message);\n  } finally {\n    dispatch(setAppStatus('succeeded'));\n  }\n};\n","import { KeyboardEvent, memo, useCallback, useRef, useState } from 'react';\n\nimport { Button, TextField } from '@mui/material';\n\ntype AddItemFormPropsType = {\n  addTask: (title: string) => void;\n  label: string;\n};\n\nexport const AddItemForm = memo(({ addTask, label }: AddItemFormPropsType) => {\n  const refTitle = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState<boolean>(false);\n\n  const addTaskHandler = useCallback((): void => {\n    if (refTitle.current!.value.trim() !== '') {\n      addTask(refTitle.current!.value.trim());\n      refTitle.current!.value = '';\n    } else {\n      setError(true);\n    }\n  }, [error]);\n\n  const addTitleOnKeyPress = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (error) {\n      setError(false);\n    }\n    if (e.key === 'Enter') {\n      addTaskHandler();\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        inputRef={refTitle}\n        onKeyPress={addTitleOnKeyPress}\n        label={error ? 'Title is required' : label}\n        error={error}\n        variant=\"outlined\"\n        size=\"small\"\n      />\n      <Button\n        style={{\n          marginLeft: '10px',\n          maxWidth: '40px',\n          maxHeight: '40px',\n          minWidth: '40px',\n          minHeight: '40px',\n        }}\n        variant=\"contained\"\n        onClick={addTaskHandler}\n        disabled={error}\n      >\n        +\n      </Button>\n    </div>\n  );\n});\n","import { ChangeEvent, memo, useState, KeyboardEvent } from 'react';\n\nimport { TextField } from '@mui/material';\n\ntype EditableSpanPropsType = {\n  title: string;\n  rename: (title: string) => void;\n  label: string;\n};\n\nexport const EditableSpan = memo(({ title, rename, label }: EditableSpanPropsType) => {\n  const [edit, setEdit] = useState(true);\n  const [newTitle, setNewTitle] = useState('');\n  const [error, setError] = useState<boolean>(false);\n\n  const activeViewMode = (): void => {\n    if (newTitle.trim() !== '') {\n      setEdit(true);\n      rename(newTitle);\n    } else {\n      setError(true);\n    }\n  };\n  const onChangeNameHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n    if (error) {\n      setError(false);\n    }\n    setNewTitle(e.currentTarget.value);\n  };\n  const onClickSpan = (): void => {\n    setEdit(false);\n    setNewTitle(title);\n  };\n  const onKeyPress = (e: KeyboardEvent<HTMLDivElement>): void => {\n    if (e.key === 'Enter') {\n      activeViewMode();\n    }\n  };\n\n  return edit ? (\n    <p style={{ whiteSpace: 'pre-wrap', maxWidth: '200px' }} onDoubleClick={onClickSpan}>\n      {title}\n    </p>\n  ) : (\n    <TextField\n      id=\"outlined-basic\"\n      label={error ? 'Title is required' : label}\n      error={error}\n      variant=\"outlined\"\n      value={newTitle}\n      size=\"small\"\n      onChange={onChangeNameHandler}\n      onBlur={activeViewMode}\n      autoFocus\n      onKeyPress={onKeyPress}\n      style={{ width: '170px' }}\n    />\n  );\n});\n","import { memo, ReactElement, useCallback, useEffect } from 'react';\n\nimport { Container, Grid, Paper } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { AddItemForm, Todolist } from 'components';\nimport { selectIsLoginIn, selectTodoListArrayId } from 'store/selectors';\nimport { addTodoListTC, getTodoListsTC } from 'store/thunks';\n\nexport const ContainerTodoLists = memo((): ReactElement => {\n  const dispatch = useDispatch();\n\n  const todoListsId = useSelector(selectTodoListArrayId);\n  const isLogin = useSelector(selectIsLoginIn);\n\n  useEffect(() => {\n    if (isLogin) {\n      dispatch(getTodoListsTC());\n    }\n  }, []);\n\n  const addTodoListHandler = useCallback(\n    (title: string) => {\n      dispatch(addTodoListTC(title));\n    },\n    [dispatch],\n  );\n\n  const TodoListsMap = todoListsId.map(id => (\n    <Grid key={id} item>\n      <Paper style={{ padding: '10px', position: 'relative' }}>\n        <Todolist todolistId={id} />\n      </Paper>\n    </Grid>\n  ));\n\n  if (!isLogin) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return (\n    <>\n      <Grid container justifyContent=\"center\" style={{ padding: '20px' }}>\n        <AddItemForm label=\"Name Todolist\" addTask={addTodoListHandler} />\n      </Grid>\n      <Container fixed>\n        <Grid container spacing={3}>\n          {TodoListsMap}\n        </Grid>\n      </Container>\n    </>\n  );\n});\n","import { forwardRef, ReactElement, SyntheticEvent } from 'react';\n\nimport { AlertProps, Snackbar } from '@mui/material';\nimport MuiAlert from '@mui/material/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setAppError } from 'store/actions';\nimport { selectError } from 'store/selectors';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>((props, ref) => (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\n));\n\nexport const ErrorSnackbar = (): ReactElement => {\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectError);\n\n  const handleClose = (event?: SyntheticEvent | Event, reason?: string): void => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppError(null));\n  };\n\n  return (\n    <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n        {error} 😠\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React, { ReactElement } from 'react';\n\nimport { LinearProgress } from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nimport { selectStatus } from 'store/selectors';\n\nexport const LoadingBar = (): ReactElement => {\n  const status = useSelector(selectStatus);\n  return (\n    <div style={{ height: '50px' }}>{status === 'loading' && <LinearProgress />}</div>\n  );\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport { ReactElement } from 'react';\n\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  TextField,\n} from '@mui/material';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { selectIsLoginIn } from 'store/selectors';\nimport { loginTC } from 'store/thunks';\nimport { LoginParamsType } from 'types';\n\nexport const Login = (): ReactElement => {\n  const dispatch = useDispatch();\n\n  const isLogin = useSelector(selectIsLoginIn);\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n    validate: values => {\n      const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\n      const minSymbolPassword = 3;\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n      if (!values.password) {\n        errors.password = 'Required';\n      } else if (values.password.length < minSymbolPassword) {\n        errors.password = 'pass min 3 ';\n      }\n      return errors;\n    },\n\n    onSubmit: values => {\n      dispatch(loginTC(values));\n      formik.resetForm();\n    },\n  });\n\n  if (isLogin) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid item justifyContent=\"center\">\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered\n                <a\n                  href=\"https://social-network.samuraijs.com/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {' '}\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps('email')}\n              />\n              {formik.touched.email && formik.errors.email && (\n                <div>{formik.errors.email}</div>\n              )}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps('password')}\n              />\n              {formik.touched.password && formik.errors.password && (\n                <div>{formik.errors.password}</div>\n              )}\n              <FormControlLabel\n                label=\"Remember me\"\n                control={<Checkbox />}\n                {...formik.getFieldProps('rememberMe')}\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import { memo, useEffect } from 'react';\n\nimport { CircularProgress } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, Route, Routes } from 'react-router-dom';\n\nimport {\n  ButtonAppBar,\n  ContainerTodoLists,\n  ErrorSnackbar,\n  LoadingBar,\n  Login,\n} from 'components';\nimport { selectIsInitialized } from 'store/selectors';\nimport { initializeAppTC } from 'store/thunks';\n\nexport const App = memo(() => {\n  const dispatch = useDispatch();\n\n  const isInitialized = useSelector(selectIsInitialized);\n\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, []);\n\n  if (!isInitialized) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <ButtonAppBar />\n      <LoadingBar />\n      <Routes>\n        <Route path=\"/\" element={<ContainerTodoLists />} />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"*\" element={<Navigate to=\"/404\" />} />\n        <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>} />\n      </Routes>\n      <ErrorSnackbar />\n    </div>\n  );\n});\n","import { AxiosError } from 'axios';\n\nimport { authAPI } from 'api';\nimport { ResultCode } from 'enum';\nimport { setAppStatus, setIsInitialized, setIsLoggedIn } from 'store/actions';\nimport { AppThunkType } from 'store/thunks/type';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const initializeAppTC = (): AppThunkType => async dispatch => {\n  try {\n    dispatch(setAppStatus('loading'));\n    const res = await authAPI.me();\n    if (res.data.resultCode === ResultCode.success) {\n      dispatch(setIsLoggedIn(true));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  } catch (error) {\n    const { message } = error as AxiosError;\n\n    handleServerNetworkError(dispatch, message);\n  } finally {\n    dispatch(setAppStatus('succeeded'));\n    dispatch(setIsInitialized(true));\n  }\n};\n","import { TASK_ACTIONS, TasksActionType, TODOLIST_ACTIONS } from 'store/actions';\nimport { TasksType } from 'types';\n\nconst initialState: TasksType = {};\n\nexport const tasksReducer = (\n  state = initialState,\n  action: TasksActionType,\n): TasksType => {\n  const copyState = { ...state };\n\n  switch (action.type) {\n    case TASK_ACTIONS.ADD:\n      copyState[action.payload.task.todoListId] = [\n        action.payload.task,\n        ...copyState[action.payload.task.todoListId],\n      ];\n      return copyState;\n\n    case TASK_ACTIONS.REMOVE:\n      return {\n        ...state,\n        [action.payload.todolistId]: state[action.payload.todolistId].filter(\n          ({ id }) => id !== action.payload.taskId,\n        ),\n      };\n\n    case TASK_ACTIONS.CHANGE:\n      return {\n        ...state,\n        [action.payload.task.todoListId]: state[action.payload.task.todoListId].map(\n          task => (task.id === action.payload.task.id ? action.payload.task : task),\n        ),\n      };\n\n    case TODOLIST_ACTIONS.REMOVE:\n      delete copyState[action.payload.todolistId];\n      return copyState;\n\n    case TODOLIST_ACTIONS.SET:\n      action.payload.todolistData.forEach(({ id }) => {\n        copyState[id] = [];\n      });\n      return copyState;\n\n    case TODOLIST_ACTIONS.ADD:\n      return { ...state, [action.payload.todoList.id]: [] };\n\n    case TASK_ACTIONS.SET:\n      copyState[action.payload.todoListId] = action.payload.tasks;\n      return copyState;\n\n    default:\n      return state;\n  }\n};\n","import { TaskPriorities } from 'enum';\nimport { TODOLIST_ACTIONS, TodoListActionType } from 'store/actions';\nimport { TodoListsType } from 'types';\n\nconst initialState: TodoListsType[] = [];\n\nexport const todoListsReducer = (\n  state = initialState,\n  action: TodoListActionType,\n): TodoListsType[] => {\n  switch (action.type) {\n    case TODOLIST_ACTIONS.CHANGE_FILTER:\n      return state.map(todolist =>\n        todolist.id === action.payload.todolistId\n          ? { ...todolist, filter: action.payload.filter }\n          : todolist,\n      );\n\n    case TODOLIST_ACTIONS.REMOVE:\n      return state.filter(({ id }) => id !== action.payload.todolistId);\n\n    case TODOLIST_ACTIONS.ADD:\n      return [\n        {\n          ...action.payload.todoList,\n          filter: 'all',\n          priority: TaskPriorities.Low,\n          entityStatus: 'idle',\n        },\n        ...state,\n      ];\n\n    case TODOLIST_ACTIONS.RENAME:\n      return state.map(todolist =>\n        todolist.id === action.payload.todolistId\n          ? { ...todolist, title: action.payload.title }\n          : todolist,\n      );\n\n    case TODOLIST_ACTIONS.SET:\n      return action.payload.todolistData.map(todolist => ({\n        ...todolist,\n        filter: 'all',\n        priority: TaskPriorities.Low,\n        entityStatus: 'idle',\n      }));\n\n    case TODOLIST_ACTIONS.CHANGE_ENTITY_STATUS:\n      return state.map(tl =>\n        tl.id === action.payload.todolistId\n          ? { ...tl, entityStatus: action.payload.entityStatus }\n          : tl,\n      );\n\n    default:\n      return state;\n  }\n};\n","import { APP_ACTIONS, AppActionsType } from 'store/actions';\nimport { AppType } from 'types';\n\nconst initialState: AppType = {\n  status: 'idle',\n  error: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (state = initialState, action: AppActionsType): AppType => {\n  switch (action.type) {\n    case APP_ACTIONS.SET_STATUS:\n      return { ...state, status: action.payload.status };\n    case APP_ACTIONS.SET_ERROR:\n      return { ...state, error: action.payload.error };\n    case APP_ACTIONS.SET_INITIALIZED:\n      return { ...state, isInitialized: action.payload.initialized };\n    default:\n      return state;\n  }\n};\n","import { AUTH_ACTIONS, AuthActionsType } from 'store/actions';\nimport { AuthInitialType } from 'types';\n\nconst initialState: AuthInitialType = {\n  isLoginIn: false,\n};\n\nexport const authReducer = (\n  state = initialState,\n  action: AuthActionsType,\n): AuthInitialType => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_IS_LOGGED_IN:\n      return { ...state, isLoginIn: action.payload.isLoginIn };\n    default:\n      return state;\n  }\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { tasksReducer, todoListsReducer, appReducer, authReducer } from 'store/reducers';\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todoList: todoListsReducer,\n  app: appReducer,\n  auth: authReducer,\n});\n\nexport type rootReducerType = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\nexport const useAppSelector: TypedUseSelectorHook<rootReducerType> = useSelector;\n","import './index.css';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { App } from 'App';\nimport { store } from 'store/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      {' '}\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"TodoList_title__2d1Vy\",\"notFont\":\"TodoList_notFont__3CARH\",\"wrapperButtons\":\"TodoList_wrapperButtons__1Sa7A\",\"disable\":\"TodoList_disable__3oqU-\",\"loadingBar\":\"TodoList_loadingBar__2cIdE\"};"],"sourceRoot":""}