{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/Todolist.tsx","components/ButtonAppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","addTask","label","useState","title","setTitle","error","setError","addTaskHandler","trim","TextField","variant","value","size","onChange","e","currentTarget","onKeyPress","key","Button","style","marginLeft","maxWidth","maxHeight","minWidth","minHeight","onClick","disabled","EditableSpan","rename","edit","setEdit","newTitle","setNewTitle","activeViewMode","whiteSpace","onDoubleClick","id","onBlur","autoFocus","sx","width","Todolist","tasks","removeTask","changeFilter","changeTaskStatus","filter","todolistId","removeTodolist","renameTask","renameTodoList","display","justifyContent","IconButton","aria-label","Delete","map","t","height","className","isDone","Grid","container","alignItems","spacing","item","Checkbox","inputProps","checked","margin","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","edge","color","mr","Typography","component","App","todolistID1","v1","todolistID2","todoLists","setTodoLists","setTasks","newTask","changeStatus","taskId","m","f","idTask","tl","Container","fixed","padding","newTodoList","tasksForTodolist","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e95676eb.chunk.js","sourcesContent":["import Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addTask: (title: string) => void\r\n    label: string\r\n\r\n}\r\nexport const AddItemForm = ({addTask, label}: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addTaskHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addTask(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === 'Enter') {\r\n            addTaskHandler();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                       label={error ? \"Title is required\" : label}\r\n                       error={error}\r\n                       variant=\"outlined\"\r\n                       value={title}\r\n                       size=\"small\"\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n            />\r\n            <Button style={{\r\n                marginLeft: '10px', maxWidth: '40px',\r\n                maxHeight: '40px', minWidth: '40px', minHeight: '40px'\r\n            }}\r\n                    variant=\"contained\" onClick={addTaskHandler} disabled={error}>+</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    rename: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = ({title, rename}: EditableSpanPropsType) => {\r\n    const [edit, setEdit] = useState(true)\r\n    const [newTitle, setNewTitle] = useState('')\r\n\r\n    const activeViewMode = () => {\r\n        setEdit(true)\r\n        rename(newTitle)\r\n    }\r\n    const onChangeNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const onClickSpan = () => {\r\n        setEdit(false)\r\n        setNewTitle(title)\r\n    }\r\n    const onKeyPress= (e: React.KeyboardEvent<HTMLDivElement>)=> {\r\n        if (e.key === 'Enter') {\r\n            activeViewMode();\r\n        }\r\n    }\r\n    return (\r\n        edit\r\n            ? <p style={{whiteSpace:'pre-wrap', maxWidth: '200px' }} onDoubleClick={onClickSpan}>{title}</p>\r\n            : <TextField id=\"outlined-basic\"\r\n                         variant=\"outlined\"\r\n                         value={newTitle}\r\n                         size=\"small\"\r\n                         onChange={onChangeNameHandler}\r\n                         onBlur={activeViewMode}\r\n                         autoFocus\r\n                         onKeyPress={onKeyPress}\r\n                         sx={{ width: '170px' }}\r\n\r\n            />\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from '../App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Grid, IconButton} from \"@mui/material\";\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n    renameTask: (todolistId: string, idTask: string, title: string) => void\r\n    renameTodoList: (todolistId: string, title: string) => void\r\n}\r\n\r\nexport function Todolist({\r\n                             title,\r\n                             tasks,\r\n                             removeTask,\r\n                             changeFilter,\r\n                             addTask,\r\n                             changeTaskStatus,\r\n                             filter,\r\n                             todolistId,\r\n                             removeTodolist,\r\n                             renameTask,\r\n                             renameTodoList\r\n                         }: PropsType) {\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        addTask(todolistId, title);\r\n    }\r\n    const allClickHandler = () => changeFilter(todolistId, \"all\");\r\n    const activeClickHandler = () => changeFilter(todolistId, \"active\");\r\n    const completedClickHandler = () => changeFilter(todolistId, \"completed\");\r\n    const deleteTodoList = () => removeTodolist(todolistId)\r\n    const renameTodoListHandler = (title: string) => {\r\n        renameTodoList(todolistId, title)\r\n    }\r\n    return <div>\r\n        <h3 style={{display:'flex', justifyContent:'space-between'}}>\r\n            <EditableSpan title={title} rename={renameTodoListHandler}/>\r\n            <IconButton onClick={deleteTodoList} aria-label=\"delete\">\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm label={'Name task'} addTask={addTaskHandler}/>\r\n        <div>\r\n            {\r\n                tasks.map(t => {\r\n                    const onClickHandler = () => removeTask(todolistId, t.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        changeTaskStatus(todolistId, t.id, e.currentTarget.checked);\r\n                    }\r\n                    const renameTaskHandler = (title: string) => {\r\n                        renameTask(todolistId, t.id, title)\r\n                    }\r\n\r\n                    return <div style={{height: '60px'}} key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\r\n                            <Grid item><Checkbox\r\n\r\n\r\n                                inputProps={{'aria-label': 'controlled'}}\r\n                                size={\"small\"}\r\n                                onChange={onChangeHandler}\r\n                                checked={t.isDone}/>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <EditableSpan rename={renameTaskHandler} title={t.title}/>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <IconButton onClick={onClickHandler} aria-label=\"delete\">\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n\r\n        <div style={{display:'flex', justifyContent:'center'}}>\r\n            <Button style={{margin: '5px'}} onClick={allClickHandler}\r\n                    variant={filter === 'all' ? \"contained\" : 'outlined'}\r\n                    size={\"small\"}\r\n            >All\r\n            </Button>\r\n            <Button style={{margin: '5px'}} onClick={activeClickHandler}\r\n                    variant={filter === 'active' ? \"contained\" : 'outlined'}\r\n                    size={\"small\"}\r\n            >Active\r\n            </Button>\r\n            <Button style={{margin: '5px'}} onClick={completedClickHandler}\r\n                    variant={filter === 'completed' ? \"contained\" : 'outlined'}\r\n                    size={\"small\"}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport default function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }} >\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './components/Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\nimport ButtonAppBar from \"./components/ButtonAppBar\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<TodoListsType[]>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    function removeTask(todolistId: string, id: string) {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== id)})\r\n    }\r\n\r\n    function addTask(todolistId: string, title: string) {\r\n        let newTask = {id: v1(), title: title, isDone: false};\r\n        setTasks({...tasks, [todolistId]: [newTask, ...tasks[todolistId]]})\r\n    }\r\n\r\n    function changeStatus(todolistId: string, taskId: string, isDone: boolean) {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === taskId ? {...m, isDone} : m)})\r\n\r\n    }\r\n\r\n    function changeFilter(todolistId: string, value: FilterValuesType) {\r\n        setTodoLists(todoLists.map(m => m.id === todolistId ? {...m, filter: value} : m))\r\n    }\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        setTodoLists(todoLists.filter(f => f.id !== todolistId))\r\n        delete tasks[todolistId]\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newTodoList: TodoListsType = {id: v1(), title: title, filter: 'all'}\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({...tasks, [newTodoList.id]: []})\r\n    }\r\n    const renameTask = (todolistId: string, idTask: string, title: string) => {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === idTask ? {...m, title} : m)})\r\n    }\r\n    const renameTodoList = (todolistId: string, title: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todolistId ? {...tl, title} : tl))\r\n    }\r\n    return (\r\n        <div>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container justifyContent={\"center\"} style={{padding: \"20px\" }}>\r\n                    <AddItemForm label={'Name Todolist'} addTask={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n\r\n                    {todoLists.map(m => {\r\n\r\n                        let tasksForTodolist = tasks[m.id];\r\n\r\n                        if (m.filter === \"active\") {\r\n                            tasksForTodolist = tasks[m.id].filter(t => !t.isDone);\r\n                        }\r\n                        if (m.filter === \"completed\") {\r\n                            tasksForTodolist = tasks[m.id].filter(t => t.isDone);\r\n                        }\r\n\r\n                        return (\r\n                            <Grid key={m.id} item>\r\n                                <Paper  style={{padding: \"10px\"}}>\r\n                                    <Todolist title={m.title}\r\n                                              todolistId={m.id}\r\n                                              tasks={tasksForTodolist}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              changeTaskStatus={changeStatus}\r\n                                              filter={m.filter}\r\n                                              key={m.id}\r\n                                              removeTodolist={removeTodolist}\r\n                                              renameTask={renameTask}\r\n                                              renameTodoList={renameTodoList}\r\n                                    />\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}